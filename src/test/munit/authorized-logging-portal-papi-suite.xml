<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="authorized-logging-portal-papi-suite.xml" />
	<munit:test name="get:\log-csv:Authorized-Logging-Portal-PAPI-config-test" doc:id="1edff2d0-b7d5-49a3-9744-17b36ab3d92a" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="5f4c769e-38f5-40e3-9442-1317546dc3e8" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="e86dea89-7fd9-4014-96ea-0293507fff53" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/csv --- readUrl('classpath://getlogcsvAuthorizedLoggingPortalPAPIconfigtest\mock_payload.dwl')]" mediaType="application/csv" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getlogcsvAuthorizedLoggingPortalPAPIconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getlogcsvAuthorizedLoggingPortalPAPIconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="b7302728-afe0-4ee8-9cca-d4900e607275" >
				<munit:payload value="#[readUrl('classpath://getlogcsvAuthorizedLoggingPortalPAPIconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getlogcsvAuthorizedLoggingPortalPAPIconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getlogcsvAuthorizedLoggingPortalPAPIconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\log-csv:Authorized-Logging-Portal-PAPI-config" doc:id="873697e9-21c0-4f00-ab06-e9ceab7d42c8" name="get:\log-csv:Authorized-Logging-Portal-PAPI-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="d147aff7-b2fe-482c-91a0-bb13490ea10e" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getlogcsvAuthorizedLoggingPortalPAPIconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\logs:Authorized-Logging-Portal-PAPI-config-test" doc:id="1ff72377-f8e5-443e-9fd7-cfc39c998447" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="8ca04eea-941e-423f-a948-c83200f5ff68" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="4f20a7ad-422a-46cc-ad75-f4659c8300b2" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getlogsAuthorizedLoggingPortalPAPIconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getlogsAuthorizedLoggingPortalPAPIconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getlogsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="5b32f804-ece7-431a-a017-6d9be8c61f0b" >
				<munit:payload value="#[readUrl('classpath://getlogsAuthorizedLoggingPortalPAPIconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getlogsAuthorizedLoggingPortalPAPIconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getlogsAuthorizedLoggingPortalPAPIconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\logs:Authorized-Logging-Portal-PAPI-config" doc:id="ea083adc-e4f0-4f45-b079-b9d4139ef528" name="get:\logs:Authorized-Logging-Portal-PAPI-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="fb324827-3d40-443f-87cf-00e4c659a045" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getlogsAuthorizedLoggingPortalPAPIconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\user-details:Authorized-Logging-Portal-PAPI-config-test" doc:id="ee853d0a-ed99-49ac-b423-0018016712fc" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="0ecf46c8-a965-473c-a0b5-6f5568e01289" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8db5a77e-6953-4d7e-ac8c-61619c60015b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="user_detail" value="#[output application/json --- readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="bearer" value="#[output application/java --- readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="in_data" value="#[output application/json --- readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="5c6881f9-5a8b-4e64-9eee-edb31beaee66" >
				<munit:payload value="#[output application/json --- readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getuserdetailsAuthorizedLoggingPortalPAPIconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\user-details:Authorized-Logging-Portal-PAPI-config" doc:id="ac404dd1-eb99-4aa3-b39c-a5af7975f647" name="get:\user-details:Authorized-Logging-Portal-PAPI-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="4281b7ff-4f15-4b80-a761-ad8875c4dffc" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getuserdetailsAuthorizedLoggingPortalPAPIconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\user-envs:Authorized-Logging-Portal-PAPI-config-test" doc:id="77e3313e-0fc7-4ead-a83e-813f393172b0" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="15ce7a80-ce62-49a4-939f-371a0e4f3bdb" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8be125ff-8ee9-4016-abae-6bea756c3020" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="environment_id" value="#[output application/json --- readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="organization_id" value="#[output application/json --- readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="envs_type" value="#[output application/json --- readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="accessToken" value="#[output application/java --- readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_4.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="env" value="#[output application/json --- readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="in_data" value="#[output application/json --- readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_6.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="org_name" value="#[output application/json --- readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_7.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="ee71398d-ca15-4602-a124-7ae2e8fdf6b7" >
				<munit:payload value="#[readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getuserenvsAuthorizedLoggingPortalPAPIconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\user-envs:Authorized-Logging-Portal-PAPI-config" doc:id="99d5ef43-be93-4d97-8b31-38da198c86e3" name="get:\user-envs:Authorized-Logging-Portal-PAPI-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="5b55e423-f834-419d-8633-4dee5c6515b0" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getuserenvsAuthorizedLoggingPortalPAPIconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\request-access:application\json:Authorized-Logging-Portal-PAPI-config-test" doc:id="9efd6f49-476f-48a8-92e5-5d16adbc6eab" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="42b28808-4cea-4f8f-974b-7bded4af761a" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="3517808f-590e-46c0-a33f-8f22dbd0a1a3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="team_det" value="#[output application/json --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="user_payload" value="#[output application/json --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_2.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[output application/java --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_3.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="in" value="#[output application/json --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="transform_data" value="#[output application/json --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="in_data" value="#[output application/json --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_6.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="email_data" value="#[output application/json --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_7.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="79e245eb-e36e-45c8-9ddc-d3755bd7d353" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\request-access:application\json:Authorized-Logging-Portal-PAPI-config" doc:id="b27ab4e9-3e4d-4bc1-9c1d-1adfc96f2e01" name="post:\request-access:application\json:Authorized-Logging-Portal-PAPI-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="e0e6bc67-de82-4534-93fe-9db17517ea04" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postrequestaccessapplicationjsonAuthorizedLoggingPortalPAPIconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\user-login:application\json:Authorized-Logging-Portal-PAPI-config-test" doc:id="0362da79-6f43-44f9-9bfa-19798cc2f58a" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="9393bc9e-acdb-4599-b85a-44f4e67baeb4" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6c847dea-1fb0-4935-ba67-166aeb7722fc" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="in" value="#[output application/json --- readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="bearer" value="#[output application/json --- readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="user_login" value="#[output application/json --- readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="me_data" value="#[output application/json --- readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="username" value="#[output application/java --- readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_5.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="8d089249-a6cb-4177-a6ad-f706248d65cc" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_payload1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_attributes1.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_variable_1.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\user-login:application\json:Authorized-Logging-Portal-PAPI-config" doc:id="7cd56b6b-9623-4ae1-9b96-bb41871ba49e" name="post:\user-login:application\json:Authorized-Logging-Portal-PAPI-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3a0f2803-c885-4daf-810c-b47a69bfc728" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postuserloginapplicationjsonAuthorizedLoggingPortalPAPIconfigtest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\approve-request:application\json:Authorized-Logging-Portal-PAPI-config-test" doc:id="7b50439c-e296-4398-b15c-2eca28e0c914" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="77e57a9f-afad-4ade-8c70-8d015c395ad3" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7656bed9-26ca-41a0-b459-e9275738c832" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="in" value="#[output application/json --- readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="httpStatus" value="#[output application/java --- readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="req" value="#[output application/json --- readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="in_data" value="#[output application/json --- readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="7ae4c757-3a76-4f39-8248-4279bff064a8" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\approve-request:application\json:Authorized-Logging-Portal-PAPI-config" doc:id="82d121ac-b0bf-467d-8c3b-7a2e81011f23" name="post:\approve-request:application\json:Authorized-Logging-Portal-PAPI-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6a6cc69a-a364-4bc9-83a8-55c92dbddd78" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postapproverequestapplicationjsonAuthorizedLoggingPortalPAPIconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Authorized-Logging-Portal-PAPI-main-test" doc:id="89c0373b-b02e-4aa9-94d1-9a9da0cb4eb6" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="38b0e7bd-877b-40c9-b9dc-e17c882fceac" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="159a3843-6537-4a9c-8667-ad0faa65bdb8" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://AuthorizedLoggingPortalPAPImaintest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://AuthorizedLoggingPortalPAPImaintest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://AuthorizedLoggingPortalPAPImaintest\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://AuthorizedLoggingPortalPAPImaintest\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="78106609-294a-4aa7-9503-f06216b1e1be" >
				<munit:payload value="#[readUrl('classpath://AuthorizedLoggingPortalPAPImaintest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://AuthorizedLoggingPortalPAPImaintest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Authorized-Logging-Portal-PAPI-main" doc:id="c8fcb920-b911-4fe2-970a-00affad81172" name="Authorized-Logging-Portal-PAPI-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="61ae709e-a8c6-4f8b-bb8d-e30b19510331" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import AuthorizedLoggingPortalPAPImaintest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\requests:Authorized-Logging-Portal-PAPI-config-test" doc:id="e6409ab8-4039-48d2-b01b-0ae7ae35fdd9" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="437c9e41-97fb-42de-a485-4df73657a51a" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="42ac985a-c450-4add-9391-adead9f47f83" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getrequestsAuthorizedLoggingPortalPAPIconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getrequestsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="user_team" value="#[output application/json --- readUrl('classpath://getrequestsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="in_data" value="#[output application/json --- readUrl('classpath://getrequestsAuthorizedLoggingPortalPAPIconfigtest\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="3c7e660b-b07a-491c-b647-6690ef3d1037" >
				<munit:payload value="#[readUrl('classpath://getrequestsAuthorizedLoggingPortalPAPIconfigtest\set-event_payload1.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getrequestsAuthorizedLoggingPortalPAPIconfigtest\set-event_attributes1.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getrequestsAuthorizedLoggingPortalPAPIconfigtest\set-event_variable_1.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\requests:Authorized-Logging-Portal-PAPI-config" doc:id="027642b5-d874-4837-9de1-b26485bf56f7" name="get:\requests:Authorized-Logging-Portal-PAPI-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="5b5f4b71-a0cb-4d72-8240-bbf6b623dbdd" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getrequestsAuthorizedLoggingPortalPAPIconfigtest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="request-access-impl-flow-test" doc:id="d2791ec9-5b9c-4cc5-8f48-39aa17e0787d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="fe1aaccb-aa6f-465f-a1a7-83ef9e09a23d" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="632742dd-5961-4a2b-903e-4a9ab49fa986" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://requestaccessimplflowtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="user_payload" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="httpStatus" value="#[output application/java --- readUrl('classpath://requestaccessimplflowtest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="in" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="transform_data" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Insert Log" doc:id="2435af2c-9c28-498a-8445-bbb8d7dfb6bd" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a8400ec6-1f00-48c7-8619-d1edd7bf36ec" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_payload1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://requestaccessimplflowtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://requestaccessimplflowtest\mock_variable_5.dwl')]" />
						<munit-tools:variable key="user_payload" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_6.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="httpStatus" value="#[output application/java --- readUrl('classpath://requestaccessimplflowtest\mock_variable_7.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="in" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_8.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="2a40490a-c580-4039-8321-3ecd7d09e8b2" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0e9e9abf-eef9-4923-bedc-9c05ecff39d6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_payload2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="team_det" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_9.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="user_payload" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_10.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://requestaccessimplflowtest\mock_variable_11.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[output application/java --- readUrl('classpath://requestaccessimplflowtest\mock_variable_12.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="in" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_13.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="transform_data" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_14.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="in_data" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_15.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="email_data" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_16.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock GET - user's team details" doc:id="f154df98-d8ff-4480-87b4-8a42ff1de93a" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="889070cd-a3fa-48c3-95a7-77bf705643c3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_payload3.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://requestaccessimplflowtest\mock_attributes1.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://requestaccessimplflowtest\mock_variable_17.dwl')]" />
						<munit-tools:variable key="user_payload" value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\mock_variable_18.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="8109904f-9f0a-421b-944b-8d9ac73b6829" >
				<munit:payload value="#[output application/json --- readUrl('classpath://requestaccessimplflowtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://requestaccessimplflowtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://requestaccessimplflowtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to request-access-impl-flow" doc:id="0b376f40-796f-4d22-9d32-de73cbf17290" name="request-access-impl-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6b034289-0ec3-426f-9076-e719fd6a1682" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import requestaccessimplflowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
